// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	"github.com/bborbe/http"
)

type HttpRoundTripperMetrics struct {
	DurationMeasureObserveStub        func(string, string, time.Duration)
	durationMeasureObserveMutex       sync.RWMutex
	durationMeasureObserveArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 time.Duration
	}
	FailureCounterIncStub        func(string, string)
	failureCounterIncMutex       sync.RWMutex
	failureCounterIncArgsForCall []struct {
		arg1 string
		arg2 string
	}
	SuccessCounterIncStub        func(string, string, int)
	successCounterIncMutex       sync.RWMutex
	successCounterIncArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int
	}
	TotalCounterIncStub        func(string, string)
	totalCounterIncMutex       sync.RWMutex
	totalCounterIncArgsForCall []struct {
		arg1 string
		arg2 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HttpRoundTripperMetrics) DurationMeasureObserve(arg1 string, arg2 string, arg3 time.Duration) {
	fake.durationMeasureObserveMutex.Lock()
	fake.durationMeasureObserveArgsForCall = append(fake.durationMeasureObserveArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.DurationMeasureObserveStub
	fake.recordInvocation("DurationMeasureObserve", []interface{}{arg1, arg2, arg3})
	fake.durationMeasureObserveMutex.Unlock()
	if stub != nil {
		fake.DurationMeasureObserveStub(arg1, arg2, arg3)
	}
}

func (fake *HttpRoundTripperMetrics) DurationMeasureObserveCallCount() int {
	fake.durationMeasureObserveMutex.RLock()
	defer fake.durationMeasureObserveMutex.RUnlock()
	return len(fake.durationMeasureObserveArgsForCall)
}

func (fake *HttpRoundTripperMetrics) DurationMeasureObserveCalls(stub func(string, string, time.Duration)) {
	fake.durationMeasureObserveMutex.Lock()
	defer fake.durationMeasureObserveMutex.Unlock()
	fake.DurationMeasureObserveStub = stub
}

func (fake *HttpRoundTripperMetrics) DurationMeasureObserveArgsForCall(i int) (string, string, time.Duration) {
	fake.durationMeasureObserveMutex.RLock()
	defer fake.durationMeasureObserveMutex.RUnlock()
	argsForCall := fake.durationMeasureObserveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *HttpRoundTripperMetrics) FailureCounterInc(arg1 string, arg2 string) {
	fake.failureCounterIncMutex.Lock()
	fake.failureCounterIncArgsForCall = append(fake.failureCounterIncArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.FailureCounterIncStub
	fake.recordInvocation("FailureCounterInc", []interface{}{arg1, arg2})
	fake.failureCounterIncMutex.Unlock()
	if stub != nil {
		fake.FailureCounterIncStub(arg1, arg2)
	}
}

func (fake *HttpRoundTripperMetrics) FailureCounterIncCallCount() int {
	fake.failureCounterIncMutex.RLock()
	defer fake.failureCounterIncMutex.RUnlock()
	return len(fake.failureCounterIncArgsForCall)
}

func (fake *HttpRoundTripperMetrics) FailureCounterIncCalls(stub func(string, string)) {
	fake.failureCounterIncMutex.Lock()
	defer fake.failureCounterIncMutex.Unlock()
	fake.FailureCounterIncStub = stub
}

func (fake *HttpRoundTripperMetrics) FailureCounterIncArgsForCall(i int) (string, string) {
	fake.failureCounterIncMutex.RLock()
	defer fake.failureCounterIncMutex.RUnlock()
	argsForCall := fake.failureCounterIncArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *HttpRoundTripperMetrics) SuccessCounterInc(arg1 string, arg2 string, arg3 int) {
	fake.successCounterIncMutex.Lock()
	fake.successCounterIncArgsForCall = append(fake.successCounterIncArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.SuccessCounterIncStub
	fake.recordInvocation("SuccessCounterInc", []interface{}{arg1, arg2, arg3})
	fake.successCounterIncMutex.Unlock()
	if stub != nil {
		fake.SuccessCounterIncStub(arg1, arg2, arg3)
	}
}

func (fake *HttpRoundTripperMetrics) SuccessCounterIncCallCount() int {
	fake.successCounterIncMutex.RLock()
	defer fake.successCounterIncMutex.RUnlock()
	return len(fake.successCounterIncArgsForCall)
}

func (fake *HttpRoundTripperMetrics) SuccessCounterIncCalls(stub func(string, string, int)) {
	fake.successCounterIncMutex.Lock()
	defer fake.successCounterIncMutex.Unlock()
	fake.SuccessCounterIncStub = stub
}

func (fake *HttpRoundTripperMetrics) SuccessCounterIncArgsForCall(i int) (string, string, int) {
	fake.successCounterIncMutex.RLock()
	defer fake.successCounterIncMutex.RUnlock()
	argsForCall := fake.successCounterIncArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *HttpRoundTripperMetrics) TotalCounterInc(arg1 string, arg2 string) {
	fake.totalCounterIncMutex.Lock()
	fake.totalCounterIncArgsForCall = append(fake.totalCounterIncArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.TotalCounterIncStub
	fake.recordInvocation("TotalCounterInc", []interface{}{arg1, arg2})
	fake.totalCounterIncMutex.Unlock()
	if stub != nil {
		fake.TotalCounterIncStub(arg1, arg2)
	}
}

func (fake *HttpRoundTripperMetrics) TotalCounterIncCallCount() int {
	fake.totalCounterIncMutex.RLock()
	defer fake.totalCounterIncMutex.RUnlock()
	return len(fake.totalCounterIncArgsForCall)
}

func (fake *HttpRoundTripperMetrics) TotalCounterIncCalls(stub func(string, string)) {
	fake.totalCounterIncMutex.Lock()
	defer fake.totalCounterIncMutex.Unlock()
	fake.TotalCounterIncStub = stub
}

func (fake *HttpRoundTripperMetrics) TotalCounterIncArgsForCall(i int) (string, string) {
	fake.totalCounterIncMutex.RLock()
	defer fake.totalCounterIncMutex.RUnlock()
	argsForCall := fake.totalCounterIncArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *HttpRoundTripperMetrics) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.durationMeasureObserveMutex.RLock()
	defer fake.durationMeasureObserveMutex.RUnlock()
	fake.failureCounterIncMutex.RLock()
	defer fake.failureCounterIncMutex.RUnlock()
	fake.successCounterIncMutex.RLock()
	defer fake.successCounterIncMutex.RUnlock()
	fake.totalCounterIncMutex.RLock()
	defer fake.totalCounterIncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HttpRoundTripperMetrics) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ http.RoundTripperMetrics = new(HttpRoundTripperMetrics)
